var I=Object.defineProperty;var k=r=>{throw TypeError(r)};var R=(r,e,t)=>e in r?I(r,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):r[e]=t;var o=(r,e,t)=>R(r,typeof e!="symbol"?e+"":e,t),A=(r,e,t)=>e.has(r)||k("Cannot "+t);var c=(r,e,t)=>(A(r,e,"read from private field"),t?t.call(r):e.get(r)),d=(r,e,t)=>e.has(r)?k("Cannot add the same private member more than once"):e instanceof WeakSet?e.add(r):e.set(r,t),u=(r,e,t,s)=>(A(r,e,"write to private field"),s?s.call(r,t):e.set(r,t),t);(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const i of document.querySelectorAll('link[rel="modulepreload"]'))s(i);new MutationObserver(i=>{for(const a of i)if(a.type==="childList")for(const n of a.addedNodes)n.tagName==="LINK"&&n.rel==="modulepreload"&&s(n)}).observe(document,{childList:!0,subtree:!0});function t(i){const a={};return i.integrity&&(a.integrity=i.integrity),i.referrerPolicy&&(a.referrerPolicy=i.referrerPolicy),i.crossOrigin==="use-credentials"?a.credentials="include":i.crossOrigin==="anonymous"?a.credentials="omit":a.credentials="same-origin",a}function s(i){if(i.ep)return;i.ep=!0;const a=t(i);fetch(i.href,a)}})();const S="?",j="start",b="end",L="tower",O=(r,e)=>Math.sqrt(Math.pow(r.x-e.x,2)+Math.pow(r.y-e.y,2));var x;class y{constructor(){d(this,x);u(this,x,Math.floor(Math.random()*1e7))}get id(){return c(this,x)}}x=new WeakMap;class P extends y{constructor({game:t,health:s,speed:i,damage:a}){super();o(this,"game");o(this,"health");o(this,"maxHealth");o(this,"speed");o(this,"gridPosition");o(this,"nextPosition");o(this,"distance");o(this,"damage");o(this,"lastMoveTime",Date.now());o(this,"direction");o(this,"reward",10);this.game=t,this.health=s,this.maxHealth=s,this.speed=i,this.distance=0,this.gridPosition=this.game.level.mapMatrix.getPathPosition(0),this.nextPosition=this.game.level.mapMatrix.getPathPosition(.5),this.direction=this.getDirection(this.nextPosition),this.damage=a}getDirection(t){return this.gridPosition?t.col>this.gridPosition.col?"right":t.col<this.gridPosition.col?"left":t.row>this.gridPosition.row?"down":t.row<this.gridPosition.row?"up":"none":"none"}move(){const t=Date.now(),i=(t-this.lastMoveTime)/1e3*this.speed,a=this.distance+i;Math.floor(a)>Math.floor(this.distance)&&(this.gridPosition=this.nextPosition,this.nextPosition=this.game.level.mapMatrix.getPathPosition(a)),this.nextPosition&&a%1>.5&&this.distance%1<=.5&&(this.direction=this.getDirection(this.nextPosition)),this.distance=a,this.lastMoveTime=t}getCanvasPosition(){if(!this.gridPosition)return null;const{row:t,col:s}=this.gridPosition,i=this.distance%1,{squareSize:a}=this.game,n=a/4;let h=s*a,l=t*a;return this.direction==="up"?(h+=a/2-n/2,l+=a-i*a):this.direction==="down"?(h+=a/2-n/2,l+=i*a):this.direction==="left"?(h+=a-i*a,l+=a/2-n/2):this.direction==="right"?(h+=i*a,l+=a/2-n/2):this.direction==="none"&&(h+=a/2-n/2,l+=a/2-n/2),{x:h,y:l}}render(){const t=this.getCanvasPosition();if(!t)return;const{squareSize:s,ctx:i}=this.game,a=s/3,{x:n,y:h}=t;i.fillStyle="black",i.fillRect(n,h,a,a),i.fillStyle="red",i.fillRect(n,h-10,a,5),i.fillStyle="green",i.fillRect(n,h-10,a*this.health/this.maxHealth,5)}takeDamage(t){this.health-=t,this.health<0&&(this.health=0)}isAlive(){return this.health>0}}class C extends y{constructor({game:t,speed:s,damage:i,target:a,position:n}){super();o(this,"game");o(this,"speed");o(this,"damage");o(this,"target");o(this,"position");o(this,"lastMoveTime");o(this,"angle");o(this,"height",10);o(this,"width",10);o(this,"images",["arrow"]);o(this,"splash",null);this.game=t,this.speed=s,this.damage=i,this.target=a,this.position=n,this.angle=0,this.lastMoveTime=Date.now()}impact(){this.target instanceof P&&this.target.takeDamage(this.damage),this.splash&&this.game.level.monsters.forEach(t=>{if(this.target instanceof P&&t.id===this.target.id)return;const s=t.getCanvasPosition();if(!s)return;O(this.position,s)<=this.splash*this.game.squareSize&&t.takeDamage(this.damage)}),this.game.projectiles=this.game.projectiles.filter(t=>t.id!==this.id)}getImage(){const t=this.images.length,s=Math.floor(Date.now()/1e3%t),i=this.images[s];return this.game.images[i]}update(){const t=Date.now(),i=(t-this.lastMoveTime)/1e3*this.speed;let a;this.target instanceof P?a=this.target.getCanvasPosition():a=this.game.convertGridPositionToCoordinates(this.target);const n=Math.sqrt(Math.pow(a.x-this.position.x,2)+Math.pow(a.y-this.position.y,2));if(i>n){this.position=a,this.lastMoveTime=t,this.impact();return}const h=Math.atan2(a.y-this.position.y,a.x-this.position.x),l=Math.cos(h)*i,g=Math.sin(h)*i;this.angle=h+Math.PI,this.position={x:this.position.x+l,y:this.position.y+g},this.lastMoveTime=t}render(){const{ctx:t}=this.game;t.save(),t.translate(this.position.x,this.position.y),t.rotate(this.angle),t.drawImage(this.getImage(),-this.width/2,-this.height/2,this.width,this.height),t.restore()}}class q extends C{constructor({game:t,target:s,position:i,damage:a,speed:n}){super({game:t,speed:n,damage:a,target:s,position:i});o(this,"height",10);o(this,"width",25)}}class M extends y{constructor(t,s){super();o(this,"game");o(this,"gridPosition");o(this,"range",4);o(this,"damage",25);o(this,"attackSpeed",1);o(this,"lastAttackTime",Date.now());o(this,"placed",!1);o(this,"type","basic");this.game=t,this.gridPosition=s}render(){const{squareSize:t}=this.game,{col:s,row:i}=this.gridPosition,a=s*t,n=i*t,h=this.game.images[`tower-${this.type}`];this.game.ctx.drawImage(h,a,n,t,t)}update(){this.attack()}getTargetsInRange(){const{monsters:t}=this.game.level,{col:s,row:i}=this.gridPosition;return t.find(a=>{if(!a.gridPosition||!a.isAlive())return!1;const n=a.gridPosition.col,h=a.gridPosition.row,l=Math.sqrt(Math.pow(n-s,2)+Math.pow(h-i,2));return Math.abs(l)<=this.range})}attack(){const t=Date.now();if(t-this.lastAttackTime>1e3/this.attackSpeed){const i=this.getTargetsInRange();i&&(this.game.projectiles.push(new q({game:this.game,target:i,position:this.game.convertGridPositionToCoordinates(this.gridPosition),damage:this.damage,speed:250})),this.lastAttackTime=t)}}}class H extends M{constructor(){super(...arguments);o(this,"range",5);o(this,"damage",25);o(this,"attackSpeed",2);o(this,"type","arrow")}attack(){const t=Date.now();if(t-this.lastAttackTime>1e3/this.attackSpeed){const i=this.getTargetsInRange();i&&(this.game.projectiles.push(new q({game:this.game,target:i,position:this.game.convertGridPositionToCoordinates(this.gridPosition),damage:this.damage,speed:500})),this.lastAttackTime=t)}}}class N extends C{constructor({game:t,target:s,position:i,damage:a}){super({game:t,speed:100,damage:a,target:s,position:i});o(this,"height",10);o(this,"width",25);o(this,"splash",1.5);o(this,"images",["bullet-1","bullet-2","bullet-3","bullet-4"])}}class W extends M{constructor(){super(...arguments);o(this,"range",5);o(this,"damage",125);o(this,"attackSpeed",.75);o(this,"type","cannon")}attack(){const t=Date.now();if(t-this.lastAttackTime>1e3/this.attackSpeed){const i=this.getTargetsInRange();i!=null&&i.gridPosition&&(this.game.projectiles.push(new N({game:this.game,target:i.gridPosition,position:this.game.convertGridPositionToCoordinates(this.gridPosition),damage:this.damage})),this.lastAttackTime=t)}}}class B extends C{constructor({game:t,target:s,position:i,damage:a}){super({game:t,speed:500,damage:a,target:s,position:i});o(this,"height",10);o(this,"width",25);o(this,"splash",.75);o(this,"images",["fire-1","fire-2"])}}class U extends M{constructor(){super(...arguments);o(this,"range",5);o(this,"damage",500);o(this,"attackSpeed",2.5);o(this,"type","fire")}attack(){const t=Date.now();if(t-this.lastAttackTime>1e3/this.attackSpeed){const i=this.getTargetsInRange();i!=null&&i.gridPosition&&(this.game.projectiles.push(new B({game:this.game,target:i,position:this.game.convertGridPositionToCoordinates(this.gridPosition),damage:this.damage})),this.lastAttackTime=t)}}}class G{constructor(e){o(this,"game");o(this,"mousePosition");this.game=e,this.mousePosition={x:0,y:0},this.init()}getCellAtMousePosition(){const{x:e,y:t}=this.mousePosition,{squareSize:s}=this.game,i=Math.floor(e/s);return{row:Math.floor(t/s),col:i}}init(){this.game.canvas.addEventListener("mousemove",e=>{const t=this.game.canvas.getBoundingClientRect();this.mousePosition={x:e.clientX-t.left,y:e.clientY-t.top},this.game.hoveredCell=this.getCellAtMousePosition()}),this.game.canvas.addEventListener("click",()=>{this.handleClick()})}handleClick(){const e=this.getCellAtMousePosition();if(this.game.level.mapMatrix.matrix[e.col][e.row]===S)this.game.money>=50&&(this.game.level.mapMatrix.matrix[e.col][e.row]=L,this.game.level.towers.push(new M(this.game,e)),this.game.money-=50);else if(this.game.level.mapMatrix.matrix[e.col][e.row]===L){let t=this.game.level.towers.find(s=>s.gridPosition.col===e.col&&s.gridPosition.row===e.row);t&&(t.type==="basic"&&this.game.money>=100?(this.game.level.towers=this.game.level.towers.filter(s=>s.id!==t.id),this.game.level.towers.push(new H(this.game,e)),this.game.money-=100):t.type==="arrow"&&this.game.money>=200?(this.game.level.towers=this.game.level.towers.filter(s=>s.id!==t.id),this.game.level.towers.push(new W(this.game,e)),this.game.money-=200):t.type==="cannon"&&this.game.money>=1e3&&(this.game.level.towers=this.game.level.towers.filter(s=>s.id!==t.id),this.game.level.towers.push(new U(this.game,e)),this.game.money-=1e3))}}}const F=r=>{const e=document.createElement("div");e.id="toolbar-top";const t=document.createElement("button");t.id="start-wave",t.innerHTML="Start Wave",t.addEventListener("click",()=>{r.startWave()}),e.innerHTML=`
    <div class="toolbar-item">
      <span>🪙: </span>
      <span id="money">100</span>
    </div>
    <div class="toolbar-item">
      <span>❤️: </span>
      <span id="health">10</span>
    </div>
    <div class="toolbar-item">
      <span>🌊: </span>
      <span id="wave">0</span>
    </div>
    <div class="toolbar-item">
      <span>👿: </span>
      <span id="monsters">0</span>
    </div>
     <div class="toolbar-item">
      <span>💀: </span>
      <span id="kills">0</span>
    </div>
  `,e.appendChild(t),document.body.insertBefore(e,document.body.firstChild);const s=document.createElement("aside");s.id="aside-right",s.innerHTML=`
  <h2>Controls</h2>
  <h3>Add a new tower</h3>
  <p>Click an empty square to add a new simple tower tower to the map</p>
  <h3>Upgrade a tower</h3>
  <p>Click a tower. If you have enough gold, the tower will be upgraded.</p>
  <h3>Towers</h3>
  <ul id="towers-overview">
  <li>
  <img src="assets/tower-basic.png" alt="basic tower" /><span><strong>Basic tower</strong>. Cost: 50 🪙<br/> Single target, short range, low damage, slow attackspeed, slow projectiles.</span>
  </li>
  <li>
  <img src="assets/tower-arrow.png" alt="arrow tower" /><span><strong>Arrow tower</strong>. Cost: 100 🪙<br/> Single target, medium range, low damage, medium attackspeed, medium speed projectiles.</span>
  </li>
  <li>
  <img src="assets/tower-cannon.png" alt="cannon tower" /> <span> <strong>Cannon tower</strong>. Cost: 200 🪙<br/> Splash damage, short range, high damage, very slow attackspeed, very slow projectiles.</span>
  </li>
  <!--
  <li>
   <img src="assets/tower-mage.png" alt="mage tower" /><span><strong>Mage tower</strong>. Cost: 300 🪙<br/> Single target, long range, medium damage, slow attackspeed, slow projectiles. </span>
  </li>
  -->
  <li>
  <img src="assets/tower-fire.png" alt="fire tower" /><span><strong>Fire tower</strong>. Cost: 1,000 🪙<br/> Small splash damage, medium range, high damage, fast attackspeed, fast projectiles.</span>
  </li>
  </ul>
  `,document.body.appendChild(s)},_=r=>{const e=document.getElementById("health");e&&(e.innerText=r.toLocaleString("en-US"))},$=r=>{const e=document.getElementById("kills");e&&(e.innerText=r.toLocaleString("en-US"))},K=r=>{const e=document.getElementById("money");e&&(e.innerText=r.toLocaleString("en-US"))},E=r=>{const e=document.getElementById("monsters");e&&(e.innerText=r.toLocaleString("en-US"))},X=r=>{const e=document.getElementById("wave");e&&(e.innerText=r.toLocaleString("en-US"))};class Y extends y{constructor(t){super();o(this,"matrix");o(this,"level");o(this,"totalDistance",0);this.level=t,this.matrix={},this.generateMapMatrix()}initMatrix(){const{gridWidth:t,gridHeight:s}=this.level.game;this.matrix=Array.from({length:t},()=>Array(s).fill(S)),this.level.startPositions.forEach(i=>{this.matrix[i.col][i.row]=[0]}),this.level.endPositions.forEach(i=>{this.matrix[i.col][i.row]=b})}generateMapMatrix(){this.level.startPositions.forEach(t=>{let s=0;do this.initMatrix(),this.totalDistance=this.buildPath(t.col,t.row,1),s++;while((this.totalDistance<this.level.minLength||this.totalDistance>this.level.maxLength)&&s<100);s>=100&&console.log("Failed to generate path")})}buildPath(t,s,i){const a=this.getNeighbors(t,s);if(a.some(({row:g,col:v})=>this.getCell(v,g)===b))return i;const n=a.filter(({col:g,row:v})=>this.canBePath(g,v,i));if(n.length===0)return-1;const h=n[Math.floor(Math.random()*n.length)],l=this.matrix[h.col][h.row];return Array.isArray(l)?l.push(i):this.matrix[h.col][h.row]=[i],this.buildPath(h.col,h.row,i+1)}getNeighbors(t,s){const i=[];return t>0&&i.push({col:t-1,row:s}),t<this.level.game.gridWidth-1&&i.push({col:t+1,row:s}),s>0&&i.push({col:t,row:s-1}),s<this.level.game.gridHeight-1&&i.push({col:t,row:s+1}),i}getCell(t,s){return this.matrix[t][s]}canBePath(t,s,i){const a=this.getCell(t,s);return!(a!==S&&Array.isArray(a)===!1||Array.isArray(a)&&a.some(h=>h>i-10)||this.getNeighbors(t,s).filter(({col:h,row:l})=>{const g=this.getCell(h,l);return Array.isArray(g)?!!g.some(v=>v>i-10):!1}).length>1||Array.isArray(a)&&a.length>=this.level.maxRepeatSquares)}getPathPosition(t){const s=Math.ceil(t);let i=s<0?this.level.startPositions[0]:this.level.endPositions[0];return Object.keys(this.matrix).forEach(a=>{const n=Number(a);Object.keys(this.matrix[n]).forEach(h=>{const l=Number(h),g=this.matrix[n][l];if(Array.isArray(g)&&g.includes(s)){i={row:l,col:n};return}})}),i}}var p;class J extends y{constructor(t,s,i,a,n,h){super();o(this,"game");o(this,"startPositions");o(this,"endPositions");o(this,"mapMatrix");o(this,"minLength");o(this,"maxLength");o(this,"maxRepeatSquares");o(this,"towers",[]);o(this,"monsters",[]);d(this,p,0);this.game=t,this.startPositions=s,this.endPositions=i,this.minLength=a,this.maxLength=n,this.maxRepeatSquares=h,this.mapMatrix=new Y(this)}get wave(){return c(this,p)}set wave(t){u(this,p,t),X(c(this,p))}}p=new WeakMap;var m,f,w;class Q{constructor(){d(this,m,10);d(this,f,100);d(this,w,0);o(this,"debug",!1);o(this,"canvas");o(this,"ctx");o(this,"squareSize",50);o(this,"gridWidth",25);o(this,"gridHeight",25);o(this,"level");o(this,"mouseHandler");o(this,"hoveredCell",null);o(this,"images",{});o(this,"tempCounter",-1);o(this,"projectiles",[]);this.canvas=document.createElement("canvas");const e=this.canvas.getContext("2d");if(!e)throw new Error("2d context not supported");this.canvas.width=this.squareSize*this.gridWidth,this.canvas.height=this.squareSize*this.gridHeight,this.ctx=e,this.level=new J(this,[{col:0,row:0}],[{col:20,row:20}],75,150,2),document.body.appendChild(this.canvas),this.mouseHandler=new G(this),this.loadImages(),new URLSearchParams(window.location.search).has("debug")&&(this.debug=!0),F(this)}getNumberOfMonstersPerWave(){return 20+(this.level.wave-1)*2}startWave(){c(this,m)<=0||this.tempCounter<this.getNumberOfMonstersPerWave()&&this.tempCounter!==-1||(this.level.wave++,this.tempCounter=0,this.spawnMonsters())}spawnMonsters(){setTimeout(()=>{this.tempCounter<this.getNumberOfMonstersPerWave()&&(this.spawnMonster(),this.tempCounter++,this.spawnMonsters())},500)}spawnMonster(){let e=100;this.level.wave>3&&(e=100+(this.level.wave-3)*15);let t=1;this.level.wave>5&&(t=1+(this.level.wave-5)*.2,e+=(this.level.wave-5)*10),this.level.wave>10&&(e+=(this.level.wave-10)*10,t+=(this.level.wave-10)*.2),this.level.wave>15&&(e+=(this.level.wave-15)*20),this.level.wave>20&&(e+=(this.level.wave-20)*20),this.level.monsters.push(new P({game:this,health:e,speed:t,damage:1})),E(this.level.monsters.length)}loadImages(){["tower-basic","tower-arrow","tower-cannon","tower-mage","tower-ice","tower-fire","arrow","bullet-1","bullet-2","bullet-3","bullet-4","fire-1","fire-2","frost-1","frost-2","frost-3","frost-4","frost-5","frost-6","frost-7","frost-8","frost-9","frost-10","frost-11","frost-12","frost-13"].forEach(t=>{const s=new Image;s.src=`./assets/${t}.png`,this.images[t]=s})}update(){const e=this.level.monsters.filter(s=>s.distance>=this.level.mapMatrix.totalDistance),t=this.level.monsters.filter(s=>!s.isAlive());t.forEach(s=>{this.money+=s.reward,this.killCount++}),this.level.monsters=this.level.monsters.filter(s=>s.isAlive()&&s.distance<this.level.mapMatrix.totalDistance),e.forEach(s=>{console.log(`Monster reached the end, -${s.damage} health`),this.health-=s.damage}),this.level.monsters.forEach(s=>{s.move()}),this.level.towers.forEach(s=>{s.update()}),this.projectiles.forEach(s=>{s.update()}),c(this,m)<0&&confirm("Game Over! Play again?")&&window.location.reload(),(t.length>0||e.length>0)&&E(this.level.monsters.length)}render(){this.drawGrid(),this.level.monsters.forEach(e=>{e.render()}),this.level.towers.forEach(e=>{e.render()}),this.projectiles.forEach(e=>{e.render()}),c(this,m)<=0&&(this.ctx.save(),this.ctx.fillStyle="red",this.ctx.font="30px Arial",this.ctx.fillText("Game Over!",this.canvas.width/2-50,this.canvas.height/2),this.ctx.restore())}drawGrid(){this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height);const{matrix:e}=this.level.mapMatrix;Object.keys(e).forEach(t=>{const s=Number(t);Object.keys(e[s]).forEach(i=>{const a=Number(i),n=e[s][a];this.ctx.save(),typeof n=="string"?n===j?this.ctx.fillStyle="blue":n===b?this.ctx.fillStyle="red":n===S?this.ctx.fillStyle="green":this.ctx.fillStyle="green":Array.isArray(n)&&n.length>0&&(this.ctx.fillStyle="rgb(200, 200, 200)"),this.ctx.fillRect(s*this.squareSize,a*this.squareSize,this.squareSize,this.squareSize),this.debug&&Array.isArray(n)&&n.length>0&&(this.ctx.fillStyle="black",this.ctx.font="12px Arial",this.ctx.fillText(n.toString(),s*this.squareSize+5,a*this.squareSize+15)),this.ctx.strokeStyle="lightgray",this.ctx.strokeRect(s*this.squareSize,a*this.squareSize,this.squareSize,this.squareSize),this.ctx.restore()})}),this.hoveredCell&&(this.ctx.save(),this.ctx.strokeStyle="gold",this.ctx.lineWidth=3,this.ctx.strokeRect(this.hoveredCell.col*this.squareSize,this.hoveredCell.row*this.squareSize,this.squareSize,this.squareSize),this.ctx.restore())}convertGridPositionToCoordinates(e){return{x:e.col*this.squareSize+this.squareSize/2,y:e.row*this.squareSize+this.squareSize/2}}get health(){return c(this,m)}set health(e){u(this,m,e),_(c(this,m))}get money(){return c(this,f)}set money(e){u(this,f,e),K(c(this,f))}get killCount(){return c(this,w)}set killCount(e){u(this,w,e),$(c(this,w))}}m=new WeakMap,f=new WeakMap,w=new WeakMap;const T=new Q,z=async()=>{T.render(),requestAnimationFrame(z)},D=async()=>{T.update(),T.health>=0&&setTimeout(D,1e3/60)};z();D();
